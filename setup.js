const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

console.log("üöÄ TrashWave Setup Script");
console.log("==========================\n");

// Check if .env exists
const envPath = path.join(__dirname, ".env");
const envExamplePath = path.join(__dirname, ".env.example");

if (!fs.existsSync(envPath)) {
  console.log("üìù Creating .env file from template...");
  if (fs.existsSync(envExamplePath)) {
    fs.copyFileSync(envExamplePath, envPath);
    console.log(
      "‚úÖ .env file created. Please update it with your configuration."
    );
  } else {
    console.log("‚ùå .env.example not found. Please create .env manually.");
  }
} else {
  console.log("‚úÖ .env file already exists.");
}

// Create storage directories
const storageDirectories = [
  "storage",
  "storage/songs",
  "storage/songs/audio",
  "storage/songs/covers",
  "storage/albums",
  "storage/playlists",
  "storage/artists",
  "storage/users",
  "storage/ads",
  "storage/ads/image",
  "storage/ads/video",
  "storage/ads/audio",
  "logs",
];

console.log("\nüìÅ Creating storage directories...");
storageDirectories.forEach((dir) => {
  const dirPath = path.join(__dirname, dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ Created: ${dir}/`);
  } else {
    console.log(`‚úÖ Exists: ${dir}/`);
  }
});

// Create .gitignore if it doesn't exist
const gitignorePath = path.join(__dirname, ".gitignore");
if (!fs.existsSync(gitignorePath)) {
  console.log("\nüìù Creating .gitignore file...");
  const gitignoreContent = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Storage
storage/*
`;
  fs.writeFileSync(gitignorePath, gitignoreContent);
  console.log("‚úÖ .gitignore file created.");
} else {
  console.log("‚úÖ .gitignore file already exists.");
}

console.log("\nüéâ Setup completed successfully!");
console.log("\nNext steps:");
console.log("1. Update your .env file with your database credentials");
console.log("2. Create your MySQL database: CREATE DATABASE trashwave_db;");
console.log("3. Run: npm run db:sync");
console.log("4. Start the server: npm run dev");
console.log("\nüìñ Documentation: http://localhost:3000/api/v1/docs");
